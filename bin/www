#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const debug = require('debug')('members-chat:server');
const webSocket = require('ws');
const app = require('../dist/src/app');
const jwt = require('jsonwebtoken')
require('dotenv').config()
const User = require('../models/users')

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

let wsClients = {}

const wss = new webSocket.Server({ server });
wss.on('connection', (ws, req) => {
  const baseURL =  `${req.protocol}://${req.headers.host}/`;
  const url = new URL(req.url, baseURL)

  const params = url.searchParams;

  const token = params.get("token");
  const chatroomId = params.get("chatroomId");
  let userId

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      ws.close();
    } else {
      wsClients[`${token}`] = {chatroomId, ...ws};
      ws.chatroomId = chatroomId
      userId = user._id;
    }
  });
  
  ws.on('message', (data) => {
    wss.clients.forEach(function each(client) {
      jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) {
            client.send("Error: Your token is no longer valid. Please reauthenticate.");
            client.close();
        } else {
          const isInServer = client.chatroomId === chatroomId
          if (client !== ws && (client.readyState === wss.options.WebSocket.OPEN) && isInServer) {
            client.send(`${data}`);
          }
        }
      });
    })
  })
  console.log('connected');

});

/**
 * Listen on provided port, on all network interfaces.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Event listener for HTTP server "error" event.
 */
